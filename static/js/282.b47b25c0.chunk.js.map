{"version":3,"file":"static/js/282.b47b25c0.chunk.js","mappings":"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","sources":["components/LoginBox/LoginBox.jsx","components/Modal/Modal.jsx","components/SingleCard/SingleCard.jsx","components/GameBoard/GameBoard.jsx","pages/DashBoard/DashBoard.jsx","hooks/useCountDown.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport './LoginBox.scss';\r\n\r\nconst LoginForm = ({ onSubmit, disabled }) => {\r\n  console.log(process.env.REACT_APP_API_ENDPOINT);\r\n  return (\r\n    <form onSubmit={onSubmit} autoComplete='off'>\r\n      <div className='form-block__input-wrapper'>\r\n        <div className='form-group form-group--login'>\r\n          <Input type='text' id='email' label='Email nhân viên' />\r\n          <Input type='text' id='code' label='Mã nhân viên' />\r\n        </div>\r\n      </div>\r\n      <button\r\n        disabled={disabled}\r\n        className='button button--primary full-width'\r\n        type='submit'\r\n      >\r\n        Vào chơi\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst Input = ({ id, type, label }) => (\r\n  <input\r\n    className='form-group__input'\r\n    type={type}\r\n    id={id}\r\n    placeholder={label}\r\n    autoComplete='off'\r\n  />\r\n);\r\n\r\nconst LoginBox = ({ onSubmit, disabled }) => {\r\n  return (\r\n    <div className='login-container'>\r\n      <div className={`form-block-wrapper form-block-wrapper--is-login`}></div>\r\n      <section className={`form-block form-block--is-login`}>\r\n        <LoginForm onSubmit={onSubmit} disabled={disabled} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginBox;\r\n","import React from 'react';\r\n\r\nimport './Modal.css';\r\n\r\nconst Modal = ({ handleClose, show, children }) => {\r\n  const showHideClassName = show ? 'modal display-block' : 'modal display-none';\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <section className='modal-main'>\r\n        <div className='modal-main-dim'>\r\n          {children}\r\n          <button className='modal-button' type='button' onClick={handleClose}>\r\n            Bắt đầu chơi\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\nimport './SingleCard.css';\r\n\r\nconst SingleCard = ({ card, handleChoice, flipped, disabled }) => {\r\n  const handleClick = () => {\r\n    console.log(disabled);\r\n    if (!disabled) {\r\n      handleChoice(card);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className={flipped ? 'flipped' : ''}>\r\n        <img className='front' src={card.src} alt='card front' />\r\n        <img\r\n          className='back'\r\n          src='/img/cover.jpg'\r\n          alt='card back'\r\n          onClick={handleClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleCard;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport SingleCard from '../SingleCard/SingleCard';\r\nimport { CARDS } from 'configurations';\r\n\r\nimport './GameBoard.css';\r\n\r\nconst GameBoard = ({\r\n  cardTotal,\r\n  isStarted,\r\n  onFinished,\r\n  time,\r\n  level,\r\n  remainingTurn,\r\n}) => {\r\n  const [cards, setCards] = useState([]);\r\n  const [choiceOne, setChoiceOne] = useState(null);\r\n  const [choiceTwo, setChoiceTwo] = useState(null);\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  // Start new game automatically\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      shuffleCards();\r\n    }\r\n  }, [isStarted]);\r\n\r\n  // shuffle card\r\n  const shuffleCards = () => {\r\n    let cardImages = [];\r\n    for (let i = 0; i < cardTotal / 2; i++) {\r\n      cardImages.push(CARDS[i]);\r\n    }\r\n    const shuffledCards = [...cardImages, ...cardImages]\r\n      .sort(() => Math.random() - 0.5)\r\n      .map((card) => ({ ...card, id: Math.random() }));\r\n\r\n    setChoiceOne(null);\r\n    setChoiceTwo(null);\r\n    setCards(shuffledCards);\r\n  };\r\n\r\n  // handle a choice\r\n  const handleChoice = (card) => {\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\r\n  };\r\n\r\n  // compare 2 selected cards\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      setDisabled(true);\r\n      if (choiceOne.src === choiceTwo.src) {\r\n        setCards((prevCards) => {\r\n          return prevCards.map((card) => {\r\n            if (card.src === choiceOne.src) {\r\n              return { ...card, matched: true };\r\n            } else {\r\n              return card;\r\n            }\r\n          });\r\n        });\r\n        resetTurn();\r\n      } else {\r\n        setTimeout(() => resetTurn(), 400);\r\n      }\r\n    }\r\n    let totalMatched = cards.reduce((accumulator, item) => {\r\n      console.log('accumulator', accumulator);\r\n      console.log('item', item);\r\n      if (item.matched) {\r\n        accumulator += 1;\r\n      }\r\n      return accumulator;\r\n    }, 0);\r\n    console.log('totalMatched', totalMatched);\r\n    if (cards.length && totalMatched === cards.length) {\r\n      onFinished();\r\n    }\r\n  }, [choiceOne, choiceTwo]);\r\n\r\n  // reset choices\r\n  const resetTurn = () => {\r\n    setChoiceOne(null);\r\n    setChoiceTwo(null);\r\n    setDisabled(false);\r\n  };\r\n\r\n  return (\r\n    <div className='Board'>\r\n      {cards.length > 0 ? (\r\n        <div className='text-container'>\r\n          <div className='text top'>Số lượt còn lại: {remainingTurn}</div>\r\n        </div>\r\n      ) : (\r\n        <div />\r\n      )}\r\n      <div className='card-grid'>\r\n        {cards.map((card) => (\r\n          <SingleCard\r\n            key={card.id}\r\n            card={card}\r\n            handleChoice={handleChoice}\r\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\r\n            disabled={disabled}\r\n          />\r\n        ))}\r\n      </div>\r\n      {cards.length > 0 ? (\r\n        <div className='text-container'>\r\n          <div className='text'>Màn: {level + 1}</div>\r\n          <div className='text'>Thời gian: {time}</div>\r\n        </div>\r\n      ) : (\r\n        <div />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { GameBoard, Modal } from 'components';\r\nimport rule from '../../assets/img/rule.png';\r\n\r\n// // Configs\r\n// import { PATH_NAME } from 'configurations';\r\n\r\n// // Services\r\n// import authService from 'services/authService';\r\n\r\n// Style\r\nimport './DashBoard.css';\r\n\r\nimport { setUser } from 'store/app/app.slice';\r\nimport { useCountDown } from 'hooks/useCountDown';\r\nimport { LEVEL, PATH_NAME } from 'configurations';\r\nimport {} from 'configurations';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst DashBoard = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector((state) => state.app.user);\r\n  const level = LEVEL[user.result.level];\r\n  const timeTotal = level.timeTotal;\r\n  const cardTotal = level.cardTotal;\r\n  const remainingTurn = user.result.remainingTurn;\r\n\r\n  console.log('timeTotal', timeTotal);\r\n  const {\r\n    time,\r\n    isTimerRunning,\r\n    hasTimerEnded,\r\n    startTimer,\r\n    stopTimer,\r\n    resetTime,\r\n  } = useCountDown(timeTotal);\r\n\r\n  const [result, setResult] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (hasTimerEnded) {\r\n      dispatch(\r\n        setUser({\r\n          ...user,\r\n          result: {\r\n            ...user.result,\r\n            remainingTurn: user.result.remainingTurn - 1,\r\n          },\r\n        })\r\n      );\r\n      setResult(2);\r\n    }\r\n  }, [hasTimerEnded]);\r\n\r\n  const onFinishedHandler = () => {\r\n    stopTimer();\r\n    console.log('WIN!');\r\n    setResult(1);\r\n    dispatch(\r\n      setUser({\r\n        ...user,\r\n        result: {\r\n          ...user.result,\r\n          level: user.result.level + 1,\r\n        },\r\n      })\r\n    );\r\n    const newTotalTime = LEVEL[user.result.level + 1].timeTotal;\r\n    resetTime(newTotalTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //startGame();\r\n    setShowModal(true);\r\n  }, []);\r\n\r\n  const startGame = () => {\r\n    setResult(0);\r\n    startTimer();\r\n  };\r\n\r\n  const onNextHandler = () => {\r\n    startGame();\r\n  };\r\n\r\n  const onReplayHandler = () => {\r\n    const newTotalTime = LEVEL[user.result.level].timeTotal;\r\n    resetTime(newTotalTime);\r\n    startGame();\r\n  };\r\n\r\n  const hideModal = () => {\r\n    setShowModal(false);\r\n    startGame();\r\n  };\r\n\r\n  console.log('isTimerRunning', isTimerRunning);\r\n  const generateBoard = () => {\r\n    if (result === 0) {\r\n      return (\r\n        <Fragment>\r\n          <GameBoard\r\n            cardTotal={cardTotal}\r\n            isStarted={isTimerRunning}\r\n            onFinished={onFinishedHandler}\r\n            time={time}\r\n            level={user.result.level}\r\n            remainingTurn={remainingTurn}\r\n          />\r\n        </Fragment>\r\n      );\r\n    } else if (result === 1) {\r\n      return (\r\n        <div className='alert'>\r\n          <div>\r\n            Chúc mừng! <br /> bạn đã vượt qua vòng {user.result.level}!\r\n          </div>\r\n          <button className='myButton' onClick={onNextHandler}>\r\n            Tiếp tục!\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className='alert'>\r\n          {remainingTurn < 0 ? (\r\n            <div>\r\n              Chúc mừng bạn hoàn thành thử thách 6 ngày 6 đêm với game vui\r\n              “Nhanh tay lẹ mắt” Trở lại làm việc hăng say cùng HD Saison\r\n              nhé…GÉT GÔ!!!\r\n            </div>\r\n          ) : (\r\n            <Fragment>\r\n              <div>Bạn đã mất 1 lượt!</div>\r\n              <div className='myButton' onClick={onReplayHandler}>\r\n                Chơi lại!\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='dash-board'>\r\n      <div className='dash-board-dim'>\r\n        <Modal show={showModal} handleClose={hideModal}>\r\n          <img src={rule} className='welcome' />\r\n        </Modal>\r\n        {generateBoard()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashBoard;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useCountDown = (startTime) => {\r\n  console.log('reload startTimer1: ', startTime);\r\n  const [time, setTime] = useState(startTime);\r\n  console.log('reload startTimer2: ', time);\r\n  const [intervalID, setIntervalID] = useState(null);\r\n  const hasTimerEnded = time <= 0;\r\n  const isTimerRunning = intervalID != null;\r\n\r\n  const update = () => {\r\n    setTime((time) => time - 1);\r\n  };\r\n\r\n  const startTimer = () => {\r\n    setIntervalID(setInterval(update, 1000));\r\n  };\r\n\r\n  const resetTime = (startTime) => {\r\n    console.log('resetTime', startTime);\r\n    setTime(startTime);\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    clearInterval(intervalID);\r\n    setIntervalID(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (hasTimerEnded) {\r\n      clearInterval(intervalID);\r\n      setIntervalID(null);\r\n    }\r\n  }, [hasTimerEnded]);\r\n\r\n  // clear interval when component unmounts\r\n  useEffect(\r\n    () => () => {\r\n      clearInterval(intervalID);\r\n    },\r\n    []\r\n  );\r\n\r\n  return {\r\n    time,\r\n    isTimerRunning,\r\n    hasTimerEnded,\r\n    startTimer,\r\n    stopTimer,\r\n    resetTime,\r\n  };\r\n};\r\n\r\nexport { useCountDown };\r\n"],"names":["LoginForm","onSubmit","disabled","console","log","process","autoComplete","className","Input","type","id","label","placeholder","handleClose","show","children","showHideClassName","onClick","card","handleChoice","flipped","src","alt","cardTotal","isStarted","onFinished","time","level","remainingTurn","useState","cards","setCards","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","useEffect","shuffleCards","cardImages","i","push","CARDS","shuffledCards","sort","Math","random","map","prevCards","matched","resetTurn","setTimeout","totalMatched","reduce","accumulator","item","length","dispatch","useDispatch","user","useSelector","state","app","LEVEL","result","timeTotal","startTime","setTime","intervalID","setIntervalID","hasTimerEnded","isTimerRunning","update","clearInterval","startTimer","setInterval","stopTimer","resetTime","useCountDown","setResult","showModal","setShowModal","setUser","onFinishedHandler","newTotalTime","startGame","onNextHandler","onReplayHandler","rule","Fragment"],"sourceRoot":""}